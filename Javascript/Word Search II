class Trie{
  constructor(){
    this.children ={};
    this.word = null;
  }
}

var findWords = function(board, words) {
  const res = [];
  const root = new Trie();
  buildTrie(root, words);
  lookForWords(board, root, res);
  return res;
};

function buildTrie(root, words){
  let node;
  for(let w of words){
    node = root;
    for(let c of w){
      const children = node.children;
      if(!children[c]) children[c] = new Trie();
        node = children[c];
    }   
    node.word = w;
  }
}

function lookForWords(board, root, res){
  const children = root.children;
  for(let i = 0; i < board.length; i++){
    for(let j = 0; j < board[i].length; j++){
        dfs(root, i, j, board, res)
    }    
  }
}

function dfs(root, row, col, board, res){  
  if(root.word){    
    res.push(root.word);
    root.word = null;
    return;
  }
  if(row < 0 || col < 0 || 
     row >= board.length || 
     col >= board[row].length){
    return;
  }      
  const children = root.children;
  const node = children[board[row][col]];
  if(!node) return false;
  const char = board[row][col];
  board[row][col] = '#';
   dfs(node, row + 1 , col, board, res)
   dfs(node, row - 1, col, board, res)
   dfs(node, row , col + 1, board, res)
   dfs(node, row , col - 1, board, res);
  board[row][col] = char;
}
