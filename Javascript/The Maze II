var shortestDistance = function(maze, start, destination) {
    var rows = maze.length;
    var cols = maze[0].length;
    //Re-create the "maze" as as nested array matrix, where element is max_value..
    //it will serve to store to min "count" for each directions
    let dist = new Array(rows).fill().map(arr => 
        Array(cols).fill(Number.MAX_VALUE));
    const dirs = [[0,1] , [0,-1],  [-1, 0], [1,0]];
    let queue = [];
    dist[start[0]][start[1]] = 0;
    queue.push(start);
    
    // queue up each spot you hit
    while(queue.length) {
        //dequeue last spot
        let curr = queue.shift();
        
        //loop through dirs
        for(let i=0; i<dirs.length; i++) {
            let [x,y] = curr;
            let count = dist[x][y];
            
            // loop until hitting the maze ends
            while(x>=0 && y>=0 && x< rows && y < cols && maze[x][y]===0) {
                x+=dirs[i][0];
                y+=dirs[i][1];
                count++;
            }
            //decrement values because stepped over by 1
            count--;
            x-=dirs[i][0];
            y-=dirs[i][1];
            
            // if count < dist[x][y] it means we either havent been there or we've now found
            // the shortest route to this location. Longer routes are ignored & not added to queue.
            if(count < dist[x][y]) {
                dist[x][y] = count;
                queue.push([x,y]);
            }
        }
    }
    // return the shortest path to destination or -1
    return dist[destination[0]][destination[1]] !== Number.MAX_VALUE ? 
        dist[destination[0]][destination[1]] : -1;
};
