Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.
Return the intersection of these two interval lists.
(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b. 
The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

/*
The idea
Between two intervals, get the latest start time as maxStart and the earliest end time as minEnd. If maxStart <= minEnd, this means there is an overlap.
*/
var intervalIntersection = function(A, B) {
    
    let i = 0 , j=0, ans = [];
    
    while(i <A.length && j <B.length){
   
        let maxStart = Math.max(A[i][0],B[j][0]);
        let minEnd = Math.min(A[i][1],B[j][1]);
            
        if (maxStart <= minEnd){ //overlap found
            ans.push([maxStart,minEnd]) }
        
        if( A[i][1] < B[j][1]) { i++;} //if  A's endpoint < B's endpoint
        else{ j++;}
    }

    return ans;
}
