/*
You are given an array of positive integers w where w[i] describes the weight of ith index (0-indexed).

We need to call the function pickIndex() which randomly returns an integer in the range [0, w.length - 1]. pickIndex() should return the integer proportional to its weight in the w array. For example, for w = [1, 3], the probability of picking the index 0 is 1 / (1 + 3) = 0.25 (i.e 25%) while the probability of picking the index 1 is 3 / (1 + 3) = 0.75 (i.e 75%).

More formally, the probability of picking index i is w[i] / sum(w).
*/

//SOLUTION 1
var Solution = function(w) {
  this.weights = new Map();
  this.acc=0;
  for (let i=0; i<w.length; i++) {
    this.acc += w[i];
    this.weights.set(this.acc, i);
  }
   // console.log(this.weights)
};

Solution.prototype.pickIndex = function() {
  let index = Math.floor(Math.random() * this.acc);
  for (let key of this.weights.keys())
    if (index<key) return this.weights.get(key)
};

//SOLUTION 2
// class Solution{
    
//     constructor(w){
//         this.array = w;
//         this.total = this.array.reduce((acc,e) => acc+e,0)
//     }
    
//     pickIndex(){
//         console.log(this.array,this.total)
//        const rand_sum = Math.floor(Math.random()*(this.total)) //give 0 to this.total-1

//         let i=0;
//         let acc =0;
//         for(i ;acc <=rand_sum;i++){
//             acc += this.array[i];
//         }
        
//          return i-1 < 0? i : i-1;
        
//     }
    
    
// }
