/*
Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "",  repeated 1 time is "abc" and repeated 2 times is "abcabc".
*/


//SOLUTION 1
var repeatedStringMatch = function(a, b) {
    const minRepeats = Math.floor(b.length / a.length);
    for (let i = minRepeats; i < minRepeats + 3; i++) {
        if (a.repeat(i).includes(b)) return i;
    }
    return -1;
};

//SOLUTION 2
var repeatedStringMatch = function(a, b) {
    if(a == b){return 1;}
    let len = Math.abs(a.length - b.length);
    let i=0;
    let c = a;
    while(c.length <= a.length*(len+1)){
      i++; 
      c = a.repeat(i);
     if(c.includes(b)){ return i}
    }
    return -1    
};


