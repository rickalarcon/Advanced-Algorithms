/*
A group of two or more people wants to meet and minimize the total travel distance.
You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in
the group. The distance is calculated using Manhattan Distance,
where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.
*/

var minTotalDistance = function(grid) {
    /*
    1) Store all horizontal and vertical positions of all group member.
    2) Now sort it to find minimum middle position, which will be the best meeting point.
    3) Find the distance of all members from best meeting point.
    */  
    let x = [];
    let y = [];
    for(let i=0; i < grid.length; i++){
        for(let j=0; j < grid[0].length; j++){
            if(grid[i][j] ==1){
                x.push(i);
                y.push(j)
     }}}
    
    x.sort((a,b)=> a-b);
    y.sort((a,b)=> a-b);
    
    
    let middle = Math.floor(x.length/2)
    let distance = 0;
    
    for(let i=0; i < grid.length; i++){
        for(let j=0; j < grid[0].length; j++){
            if(grid[i][j] ==1){
                //x[middle] and y[middle] doesnt change, they already defined
                //x[middle] = middle of x-axis 
                //y[middle] = middle of y-axis
                distance += Math.abs(x[middle] - i) + Math.abs(y[middle] -j)
        }}}
    
    return distance 
};
