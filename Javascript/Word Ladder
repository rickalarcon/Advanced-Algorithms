var ladderLength = function(beginWord, endWord, wordList) {
    const adjacencies = new Map();
    const getGeneric = (str, i) => `${str.substring(0, i)}*${str.substring(i + 1)}`;
    
    const visited = new Map();
    const queue = [];
    
    wordList.forEach(word => {
        for (let i = 0; i < word.length; i++) { //word.length Since all words are of                                                        same length.
            const generic = getGeneric(word, i);  // ei. *ot , o*t, ho*

            const transformations = adjacencies.get(generic) || []; //get values for gerenic                                                                        key
            
            transformations.push(word);              //push word the the values of same key          
            adjacencies.set(generic, transformations); //update keys and values
        }
    });// so adjacencies = our adjancent list
    
    // Queue for BFS
    queue.push([beginWord, 1]); // 1 represents the level number of a node
    visited.set(beginWord, true); // to prevent cycles, use a visited dictionary

    while (queue.length !== 0) {
        const [word, level] = queue.shift();  //get first element in queue
        for (let i = 0; i < word.length; i++) {
            //Intermediate words for current word
            const generic = getGeneric(word, i);
            const transformations = adjacencies.get(generic) || [];  //getting words with same genenic..
// Next states are all the words which share the same intermediate state.
            for(const adjacent of transformations) {
                // If at any point if we find what we are looking for
                // i.e. the end word - we can return with the answer.
                if (adjacent === endWord) { //terminate the bfs
                    return level + 1;
                }    
               // Otherwise, add it to the BFS Queue. Also mark it visited
                if (!visited.has(adjacent)) {
                    visited.set(adjacent, true);
                    queue.push([adjacent, level + 1]);
                }
            }

        }
    }
    return 0;
};

