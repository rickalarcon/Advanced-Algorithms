//Straightforward Hashmap implementation. All functions run in O(1) but memory is O(nK) //where K is number of snapshots.
var SnapshotArray = function(length) {
    this.array = [];
    this.snap_id = -1;
    this.snapshots = new Map();
};

/** 
 * @param {number} index 
 * @param {number} val
 * @return {void}
 */
SnapshotArray.prototype.set = function(index, val) {    
    this.array[index] =val;
};

/**
 * @return {number}
 */
SnapshotArray.prototype.snap = function() {
    this.snap_id++;
    let snapshot = [...this.array]; 
    this.snapshots.set(this.snap_id,snapshot); 
    return this.snap_id;
};

/** 
 * @param {number} index 
 * @param {number} snap_id
 * @return {number}
 */
SnapshotArray.prototype.get = function(index, snap_id) {
   let arrAtSnapID = this.snapshots.get(snap_id);
    return arrAtSnapID[index] === undefined? null :arrAtSnapID[index] ;
};

/** 
 * Your SnapshotArray object will be instantiated and called as such:
 * var obj = new SnapshotArray(length)
 * obj.set(index,val)
 * var param_2 = obj.snap()
 * var param_3 = obj.get(index,snap_id)
 */
