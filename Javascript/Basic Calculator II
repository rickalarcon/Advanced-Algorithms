// Idea:
// 1) first split elements
// 2) evalute values

/*
The Idea
It's very obvious that we need to traverse the input string and somehow gathers information on both the numbers and the operators.
For the number part it's easy, a string is a correct number until we hit a operator.
For the operator part, The intuition here is to have a prevSign variable initialized to +, this way every time we see a new operator, we actuall make the calculation using the prevSign and set the new operator as prevSign for next time use. The tricky part here is whenever we meet a * or /, we need to get the last number from our calculation stack in order to make the operation. At the end, we just need to add all the numbers from our call stack.

It's easier ot think with examples. Think of the example 2+3*2, where we initialize calcStack = [] & prevSign = +
2 -> a number, calcStack = []
+ -> calc w/ prevSign +, calcStack = [2], set prevSign +
3 -> a number
* -> calc w/ prevSign + , calcStack = [2, 3], set prevSign *
2 -> a number
end -> calc w/ prevSign * using 3, calStack [2, 6]
Sum of array is 8.

Code Time
*/
var calculate = function(s) {
   // s.replace(/\s/g, '');
   s= s.split(" ").join(""); //removing empty spaces
    let num = ""
    let calc = [];
    let prevSign = '+'
    for (let i=0;i<s.length;i++) {
        if (!isNaN(s[i])) { //if its number then add to "num"
            num+=s[i];
        }

        if (isNaN(s[i]) || i == s.length-1) { //isNaN is "true" if it is not a number
            if (prevSign == "+") {
                calc.push(Number(num));
            } else if (prevSign == "-") {
                calc.push(Number(-num));
            } else if (prevSign == "*") {
                calc.push(Math.floor(calc.pop()*num));
            } else {
                calc.push(Math.trunc(calc.pop()/num))
            }
            prevSign = s[i];
            num="";
        }
    }
    return calc.reduce((a,b)=>a+b);
};
