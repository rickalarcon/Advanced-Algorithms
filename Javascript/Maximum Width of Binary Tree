function widthOfBinaryTree(root) {
  const mins = [0];
  let max = 0;
  
  dfs(root, 0, 0);
  return max;
  
  function dfs(v, lvl, pos) {
    if (!v) return;
    if (lvl === mins.length) {
      mins[lvl] = pos;
    }
    
    const delta = pos-mins[lvl];
    max = Math.max(max, delta+1);
    dfs(v.left, lvl+1, delta*2);
    dfs(v.right, lvl+1, delta*2+1);
  }
}
//Solution2:
// Idea
// 1) Do BFS level traversal
// 2) if a node and only 1 child, then add a "x" to the next level so
// we can count the real distance for the last level
// var widthOfBinaryTree = function(root) {
   
//     var level =[];
//     function leveltraverse(node,l) {
//         if(!node) return
//         if(!level[l]) { level[l]= [];} 
//         level[l].push(node.val);
//         leveltraverse(node.left,l+1);
//         leveltraverse(node.right,l+1);
//      if(node.right && !node.left) {level[l+1].push("x"); }
//      if(!node.right && node.left) {level[l+1].push("x"); }
//     }
    
//     if(!root) return null;
//     leveltraverse(root,0);
// var ans = level.map(e => e.length);
//     ans.sort((a,b) => b-a);
//     return ans[0];
// };
