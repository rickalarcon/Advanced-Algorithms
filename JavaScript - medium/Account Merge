// The idea
// Build a graph of linked emails using ajacent list.
// We only need a two way linkage between the first email and the rest emails because during a dfs, as long as one of the email links to a "email network", we will be able to explore all the emails.

var accountsMerge = function(accounts) {  
    
    let graph = {};    // will have the linked emails {"john_newyork@mail.com":                                                                         "johnsmith@mail.com"  }
    let nameDict = {}; // will have the form: { email_address : name}
    
    for (let acc of accounts) {
        let name = acc[0];
        nameDict[acc[1]] = name;
        for (let i=1;i<acc.length;i++) {
            if (!graph[acc[i]]) graph[acc[i]] = new Set();
            nameDict[acc[i]] = name;    //adding name foreach email in the acc
            if (i != 1) {
                graph[acc[1]].add(acc[i]);
                graph[acc[i]].add(acc[1]);
    }}}

    let res = [];
    let visited = new Set();
    
    let dfs = function (key) {
        visited.add(key);
        let emails = [key];
        graph[key].forEach((e)=>{
            if (!visited.has(e)) {
                emails.push(...dfs(e));
            }})    
        return emails;
       }
    
    for (let key in graph) {
        if (!visited.has(key)) {
            let temp = dfs(key);
            temp.sort();
            temp.unshift(nameDict[temp[0]]);
            res.push(temp);
        }
    }
    
    return res;
};

