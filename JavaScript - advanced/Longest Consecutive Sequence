//Time complexity is O(n)
function longestConsecutive(nums) {
  if (nums == null || nums.length === 0) return 0;
  
  const set = new Set(nums); // ei. Set(6) { 100, 4, 200, 1, 3, 2 } , remember "set" doesnt hold  duplicate numbers
  let max = 0;

  for (let num of set) {

    if (set.has(num - 1)) continue;  // make sure starting from the beginning of sequence

    let currNum = num;
    let currMax = 1;

    while (set.has(currNum + 1)) { //start sequence its first number currNum
      currNum++;
      currMax++;
    }
    max = Math.max(max, currMax);
  }

  return max;
}

// Idea: time complexity is O(nln(n))
// 1) Sort nums in ascending order
// 2) if 2 numbers are consecutive, then add them to the queue and find 
// the max length
// 3) if they arenot consecusetives, reset the arr

// var longestConsecutive = function(nums) {
//     nums.sort((a,b) => a-b);
//     var i = 0;
//     var max = 1;
//     var arr =[];
//     while(i < nums.length-1){
//         if( nums[i+1]-nums[i]==1 || nums[i+1]==nums[i] ){
//            if(!arr.includes(nums[i])){ arr.push(nums[i]) }
//            if(!arr.includes(nums[i+1])){ arr.push(nums[i+1]) }  
//            max = Math.max(arr.length,max);
//         }
//         else{
//            arr = [];
//         } 
//         i++
//     }
// return nums.length == 0? 0:max;   
// };
