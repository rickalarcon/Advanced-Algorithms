var maxSumOfThreeSubarrays = function(nums, k) {
        let n = nums.length;
        let sum = Array(n + 1).fill(0);
        let left = Array(n).fill(0);
        let right = Array(n).fill(0);
        let ret = [];
        
        // First get the prefix sum of nums.
        // Prefix sum enables us to get the sum of k consecutive element in O(1) time
        for (let i = 0; i < n; i++) {
            sum[i + 1] = sum[i] + nums[i];   
        }
    console.log(sum);
        
        // DP for the left interval max sum
        for (let i = k, tot = sum[k] - sum[0]; i < n; i++) {
            if (sum[i + 1] - sum[i - k + 1] > tot) {
                tot = sum[i + 1] - sum[i - k + 1];
                left[i] = i - k + 1;
            } else {
                left[i] = left[i - 1];
            }
        }
        
        // DP for the right interval max sum
        right[n - k] = n - k;
        for (let i = n - 1 - k, tot = sum[n] - sum[n - k]; i >= 0; i--) {
            if (sum[i + k] - sum[i] >= tot) {
                tot = sum[i + k] - sum[i];
                right[i] = i;
            } else {
                right[i] = right[i + 1];
            }
        }
        
        // Find the max sum by iterating through the middle interval index based on above 2 cache.
        let maxSum = 0;
        for (let i = k; i <= n - 2 * k; i++) {
            let l = left[i - 1];
            let r = right[i + k];
            let tot = sum[l + k] - sum[l] + sum[r + k] - sum[r] + sum[i + k] - sum[i];
            //console.log(tot);
            if (tot > maxSum) {
                ret[0] = l;
                ret[1] = i;
                ret[2] = r;
                maxSum = tot;
            }
        }
        
        return ret;    
};
