/*
We need to use a dp matrix, where dp(i, j) refers to the minimum cost of finding the worst number given only the numbers in the range (i, j)
note: at the end DP can be undertand like a upper triangule, where the bottom triangle are all zeros
*/
var getMoneyAmount = function(n) {
    var dp = [];
    var i, j,k, min;
    
    for(i=0; i<n+1; i++) {
        dp.push([]);
    }
    for(i=1; i<n+1; i++) {
        // when length is 1, then min cost is 0 cuz we always hit the right one
        //range(i,i)
        dp[i][i]=0;           // ei. dp[2][2]= 0 => dp[2][2] will give [empty,empty,0]
    }
   console.log(dp)

    for(i = n-1; i>=1; i--) { // going from bottom row to top row
        dp[i][i+1] = i;       //if we only have 2 numbers (range(i,i+1) then min cost in worst case is "i"
        for(j=i+2; j<n+1; j++) {
            min = Math.min(i + dp[i+1][j], j+dp[i][j-1]);//min cost in worst case scenario
            for(k=i+1;k<=j-1; k++) {
                min = Math.min(Math.max(dp[i][k-1],dp[k+1][j])+k, min);
            }
            dp[i][j] = min;
        }
    }
        console.log(dp)

    return dp[1][n];
};
