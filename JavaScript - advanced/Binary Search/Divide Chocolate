/*
Same concept as leetcode 410: https://leetcode.com/problems/split-array-largest-sum/
Using Binary Search

IDEA:
We want to maximize the minimum sweetness.
Binary search the result between 1 and 10^9.
*/
var maximizeSweetness = function(sweetness, K) {
    
    let left = Infinity;
    let right = 0;
    
    for(let sweet of sweetness) {
        right += sweet; //acc total sweetness into "right"
        left = Math.min(sweet, left); //minimum sweet into "left"
    }

    while(left <= right) {
        let sum = 0;    //reset in every iteration
        let count = 1;  //reset in every iteration

        const mid = Math.floor((right+left)/2); //it changes when right or left changes
        
        for(let i = 0; i < sweetness.length; i++) {
        //acc sweetness in "sum", if sum>mid then: reset sum and count +=1;
            sum += sweetness[i];
            if(sum > mid) { 
                sum = 0;   //reset sum
                count += 1;
            }}
        //K+1 is the number of pieces we need to cut it
        if(count > K+1) {
            left = mid +1 ; //updating "left" which is minimun sweet
        } else {
            right = mid - 1; //updating "right" which is the total sweetness
        }
    }
    
    return left; //will be the maximum total sweetness we can get(remember that we'll be                            generous so we will take the minimum total sweetness piece)
    
};
