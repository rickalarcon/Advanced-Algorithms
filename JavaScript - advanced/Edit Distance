//IDEA:
//Levenshtein algorithm is used with dynamic programming
// we create a metrix with the words as rows and cols and then 
//we apply the formula for edit distance between then
var minDistance = function(word1, word2) {
     
    let n = word1.length;
    let m = word2.length;

    // if one of the strings is empty
    if (n * m == 0)
      return n + m;

    // array to store the convertion history
    let d = Array(n+1).fill(null).map(()=>(Array(m+1).fill(0)));

    // init boundaries
    for (let i = 0; i < n + 1; i++) {
      d[i][0] = i;
    }
    for (let j = 0; j < m + 1; j++) {
      d[0][j] = j;
    }
    // DP compute 
    for (let i = 1; i < n + 1; i++) {
      for (let j = 1; j < m + 1; j++) {
        let left = d[i - 1][j] ;
        let down = d[i][j - 1] ;
        let left_down = d[i - 1][j - 1];
        if (word1[i - 1] == word2[j - 1]) {left_down -= 1;}
        d[i][j] = 1 + Math.min(left, Math.min(down, left_down));

      }
    }

    return d[n][m];
  };
