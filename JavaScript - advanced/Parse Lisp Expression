const scope = [];

// (let x 2 (add (let x 3 (let x 4 x)) x)) 
var evaluate = function(expression) {
    scope.push(new Map());
    const ans = evaluate_inner(expression);
    scope.pop();
    return ans;
};

function evaluate_inner(exp) {
    if (exp[0] !== '(') {
        // number
        if (/[0-9]/.test(exp[0]) || exp[0] === '-') {
            return parseInt(exp); // 
        }
        
        // variable
        for (let i = scope.length - 1; i >= 0; i--) {
            if (scope[i].has(exp)) {
                return scope[i].get(exp);
            }
        }
    }
    
    // (let x 3 (let x 4 x))
    // => x, 3, (let x 4 x))
    const tokens = parse(exp.substring(exp[1] === 'm' ? 6 : 5, exp.length - 1)); //  '(let|add|mult ' 
    
    if (exp.startsWith('add', 1)) {
        return evaluate(tokens[0]) + evaluate(tokens[1]);
    } else if (exp.startsWith('mult', 1)) {
        return evaluate(tokens[0]) * evaluate(tokens[1]);
    } else {
        // let v1 e1 v2 e2 ... exp
        for (let j = 1; j < tokens.length; j += 2) {
            scope[scope.length - 1].set(tokens[j - 1], evaluate(tokens[j]));
        }
        return evaluate(tokens[tokens.length - 1]); //expression
    }
}

function parse(exp) {
    // 把当前层的 token 取出来，不会进入更深的层数
    // (let x 3 (let x 4 x))
    // => x 3 (let x 4 x))
    // => x, 3, (let x 4 x))
    const tokens = [];
    let balanced = 0;
    let token = '';
    for (let part of exp.split(' ')) {
        for (let char of part) { // 'x))' 
            if (char === '(') balanced++;
            if (char === ')') balanced--;
        }
        if (token.length > 0) token += ' ';
        token += part;
        if (balanced === 0) {
            tokens.push(token);
            token = '';
        }
    }
    if (token.length > 0) { // 'x))' 
        tokens.push(token);
    }
    return tokens;
}
