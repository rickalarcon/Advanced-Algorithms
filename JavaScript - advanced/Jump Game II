Idea:
We are using Greedy Algorithm idea
1) Initiate the maximum position that one could reach starting from the current index i or before: max_pos = nums[0].
2) Initiate the maximum position reachable during the current jump: max_steps = nums[0].
3) Initiate number of steps: at least one, if array has more than 1 cell.

4) Iterate over number of elements in the input array:
    - If max_step < i, one needs one more jump: jumps += 1. To minimize the number of jumps,       choose the longest possible one: max_steps = max_pos.
    - Update max_pos = max(max_pos, i + nums[i]).
5) Return the number of jumps.
*/
 var jump = function(nums) {
 let n = nums.length;
    if (n < 2) return 0;
    // max position one could reach 
    // starting from index <= i 
    let maxPos = nums[0];
    // max number of steps one could do
    // inside this jump
    let maxSteps = nums[0];
    let jumps = 1;             //we make first jump, so we have start loop to the next ones
    for (let i = 1; i < n; ++i) {  //indexes
      // if to reach this point 
      // one needs one more jump
      if (maxSteps < i) { //if true, need one more jump . if false, means we are still during                               the first jump
        ++jumps;
        maxSteps = maxPos;  //apply Greedy 
      }
      maxPos = Math.max(maxPos, nums[i] + i); // note nums[i]+i is (current index + max jump)                       this will give us the exact index location when jumping
    }
    return jumps;
 }
